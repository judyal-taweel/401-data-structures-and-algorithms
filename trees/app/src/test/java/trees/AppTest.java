/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

import Data.Node;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    BinerySearchTree binerySearchTree= new BinerySearchTree();
    @Test
    public void testEmpty(){
        binerySearchTree.add(2);
        assertNotNull(binerySearchTree);
    }
    @Test
    public void testAdd(){
        binerySearchTree.add(2);
    assertEquals(2,binerySearchTree.getRootKey());
    }
 BineryTree bineryTree= new BineryTree();
    @Test
    public void testAddLeftRght(){
        bineryTree.setRoot(new Node(1));
        bineryTree.getRoot().setLeft(new Node(2));
        bineryTree.getRoot().setRight(new Node(3));
        assertEquals(2,bineryTree.getLeftBT());
    }

    @Test
    public void testInOrder(){
        ArrayList arrayList = new ArrayList();
        bineryTree.setRoot(new Node(1));
        bineryTree.getRoot().setLeft(new Node(2));
        bineryTree.getRoot().setRight(new Node(3));
        bineryTree.inOrder(bineryTree.getRoot());
        arrayList.add(bineryTree.arrayListInOrder);
        assertEquals("[[2, 1, 3]]",arrayList.toString());
    }
    @Test
    public void testPostOrder(){
        ArrayList arrayList = new ArrayList();
        bineryTree.setRoot(new Node(1));
        bineryTree.getRoot().setLeft(new Node(2));
        bineryTree.getRoot().setRight(new Node(3));
        bineryTree.postOrder(bineryTree.getRoot());
        arrayList.add(bineryTree.arrayListPostOrder);
        assertEquals("[[2, 3, 1]]",arrayList.toString());
    }
    @Test
    public void testPreOrder(){
        ArrayList arrayList = new ArrayList();
        bineryTree.setRoot(new Node(1));
        bineryTree.getRoot().setLeft(new Node(2));
        bineryTree.getRoot().setRight(new Node(3));
        bineryTree.preOrder(bineryTree.getRoot());
        arrayList.add(bineryTree.arrayListPreOrder);
        assertEquals("[[1, 2, 3]]",arrayList.toString());
    }
   @Test
    public void testMax(){
       bineryTree.setRoot(new Node(1));
       bineryTree.getRoot().setLeft(new Node(2));
       bineryTree.getRoot().setRight(new Node(3));
       assertEquals(3,bineryTree.findMax());
   }

}
